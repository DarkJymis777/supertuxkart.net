Note that these instructions apply to STK versions more recent than 0.8 alpha. If you want to compile an older version, please use the history feature of the wiki.

<div class="outer_info">
    <div class="inner_msg">
'''If you are a packager making a package for a Linux distribution''', please do '''not''' try to modify our build system to use system versions of bullet and irrlicht. In both cases we use a specific and/or modified version of the library, and linking STK against the system library will only introduce bugs (corrupted graphics, memory leaks) into SuperTuxKart. Thanks
</div></div>


== Installing dependencies ==

First of all, you will need a c++ compiler, the autotools build system and cmake. Other dependencies you will need include openal, ogg, vorbis. You don't need to install irrlicht, bullet, enet or wiiuse because they are included in the git repository.

* Fedora
<code>yum install gcc-c++ autoconf automake git-core libogg-devel libvorbis-devel openal-soft-devel fribidi-devel subversion libcurl-devel cmake libbluedevil-devel.x86_64 glew-devel</code>
* Ubuntu/Debian
<code>sudo apt-get install autoconf automake build-essential cmake git libogg-dev libvorbis-dev libopenal-dev libxxf86vm-dev libgl1-mesa-dev libglu1-mesa-dev libcurl4-openssl-dev libfribidi-dev libbluetooth-dev subversion libxrandr-dev libglew-dev</code>

== Obtain code and assets ==
STK is splitted up into code and assets, so you need these two commands two get both:
<code>git clone https://github.com/supertuxkart/stk-code.git stk-code # about 130 MB
svn checkout https://svn.code.sf.net/p/supertuxkart/code/stk-assets stk-assets # about 650 MB</code>
See [[Source control]] for more information.

== Building SuperTuxKart ==

Then build SuperTuxKart using CMake

'''The <TT>stk-code</TT> and the <TT>stk-assets</TT> directory need to be in the same folder.'''

<code>cd stk-code
mkdir cmake_build
cd cmake_build
cmake ..
make -j2
</code>

You can speed up compilation by changing the number behind <tt>-j</tt> to the number of cores you have.

To make a debug build add <tt>-DCMAKE_BUILD_TYPE=Debug</tt> like this:

<code>cmake .. -DCMAKE_BUILD_TYPE=Debug</code>

Another option is to build the regular release version with its optimizations, but with debugging symbols still enabled. Replace the <tt>Debug</tt> with <tt>RelWithDebInfo</tt> for that.

To enable wiiuse, add:
<code> -DUSE_WIIUSE=yes</code>

To run supertuxkart, just start it from the build directory:
<code>./bin/supertuxkart</code>

''And finally, to install (optional):

<code>sudo make install</code>''

This will install in /usr/local. If you want to install somewhere else, replace the "cmake" command with something like:

<code>cmake .. -DCMAKE_INSTALL_PREFIX=/path/to/install</code>

If you want to update your copy of stk-code and stk-assets, go in the parent directory of stk-code:
<code>cd stk-code
git pull
cd ../stk-assets
svn update</code>

== Using Eclipse ==
If you want to use the eclipse ide, use the following approach:

In the trunk :
    mkdir cmake_build
    cd cmake_build
    cmake -G "Eclipse CDT4 - Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug ..

This will generate project files based on the cmake files.

Now you can open Eclipse, Import -> Existing projects into workspace, browse to the trunk and import the build project.

Though, I recommend making a new project with the trunk as directory so that you can actually browse the source in the IDE and use the source control (SVN/GIT) plugins.

Now right-click on this project -> New -> Convert to C++ Project (Possibly not needed if you made a C++ project in the previous step.)

Right-click the project -> properties -> C/C++ Build
* Uncheck "Use default build command"
* Enter as build command "make -j2" (replace 2 by the number of cores)
* Change the build directory to cmake_build

Now you can build the project by :
* Right-click project -> Build Project
* Or by using the build button at the top

For easier code browsing an making use of Eclipse features : 

C/C++ Build -> Discovery options
* Automate discovery of path and symbols
* Discovery profile : GCC per project scanner into profile
Apply

Right-click project -> index -> rebuild
