This page will explain how to build and packaged SuperTuxKart on mac OS X.


Please note that this is meant for developers and '''not''' casual users. Information below are notes i gathered about building STK 0.7 with irrLicht 1.7+. For older versions of STK, see [[Building STK 06 on OSX]]

'''Note''' : building on OSX 10.7 is a little more painful because the compiler provided by Apple wants really hard to make 64-bits binaries but the dependencies pack I provide is 32-bits for backwards compatibility. If you want to compile on 10.7, you will need to either convince the compiler to produce 32-bits binaries, either produce a 64-bits dependency pack


= Getting Started =
* Install developer tools, either from the OS X Install DVD or from Apple's website

* symlink include folder of OpenGL framework to /usr/local/include/GL (Unix programs have an easier time finding it this way)
<code>sudo ln -s /System/Library/Frameworks/OpenGL.framework/Versions/A/Headers/ /usr/local/include/GL</code>
(you might need to create <TT>/usr/local/include/</TT> first if you never built and installed anything from source! <TT>sudo mkdir -p /usr/local/include/</TT>)

= Dependencies =
* Download pre-built dependencies [https://sourceforge.net/projects/supertuxkart/files/SuperTuxKart%20Dependencies/OSX/ from here]
* Put the frameworks in [hard disk root]/Library/Frameworks


= CMake =
You can use the CMake build system to build STK. At this time CMake will not make a binary that is ready for distribution.

'''Note''' : due to a factor that eludes me, when generating a Xcode project rather than a makefile, Objective-C++ does not compile correctly. If you get errors in CIrrDeviceMacOSX.mm, you may need to comment out the @try statement and @catch block until a better solution is found


'''Building on 10.7''' (and hopefully 10.8, but I can't test on this system)
<code>mkdir cmake_build
cd cmake_build
cmake .. -DCMAKE_CXX_COMPILER=/usr/bin/g++ -DCMAKE_C_COMPILER=/usr/bin/gcc
make
</code>



'''Building on 10.6'''
<code>export CMAKE_OSX_ARCHITECTURES=i386
mkdir cmake_build
cd cmake_build
cmake ..
make
</code>

'''Building on 10.6 with compatibility for 10.5'''
alternatively, to make a build backwards compatible with OSX 10.5 (this will likely need to be done from 10.6, I don't think making builds that far backwards compatible is possible under 10.7+)
<code>export CMAKE_OSX_ARCHITECTURES=i386
mkdir cmake_build
cd cmake_build
cmake .. -DCMAKE_OSX_SYSROOT=/Developer/SDKs/MacOSX10.5.sdk/ -DCMAKE_OSX_DEPLOYMENT_TARGET=10.5
make
</code>

= Xcode =


<div class="outer_warning">
    <div class="inner_msg">
'''The provided Xcode project currently works out-of-the-box only works with Xcode 3.''' If you are using Xcode 4, especially if on OSX 10.7 Lion, you will need to tweak the project to use the 10.6 SDK, as the 10.4 SDK which the current project uses was removed by Apple in Xcode 4
</div></div>


<div class="outer_warning">
    <div class="inner_msg">
'''In SVN trunk, the Xcode project may not be up to date'''. We will update it for stable releases but during development you may need to manually add/remove files that changed so that the project builds
</div></div>


== SuperTuxKart ==

Build SuperTuxKart using the provided Xcode project (in /src/ide/)

That's all! If all went well, you're ready to run STK by hitting the big green 'run' button.

== Distributing ==

The release build style will automatically build a 10.4-compatible, universal app bundle with data and frameworks inside.

Then the last step is to package libintl inside the application bundle, for this we use [http://macdylibbundler.sourceforge.net/ dylibbundler]

<code>dylibbundler -b -x ./SuperTuxKart.app/Contents/MacOS/supertuxkart -d ./SuperTuxKart.app/Contents/libs/ -od -p @executable_path/../libs/</code>
