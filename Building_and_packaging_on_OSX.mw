This page will explain how I built and packaged SuperTuxKart on mac OS X.

Note that this is only how I did it, and there might be other ways (I [[jpenguin]] have update it to include better instructions for using macports). I personally do not like macports/fink and prefer building everything from source, however if you are comfortable with these tools then go on and use them, you just might need to adapt your environments and some paths so that libraries built with them are correctly picked up. I added a section below with macports commands - however be aware you will probably need to adapt your environment for stuff to be picked up properly.

You could also use OS X frameworks instead of Unix-style libs, this would of course require heavier patching of the STK build system.

==== Building dependencies from source ====

====== Environment ======
* Install developer tools, either from the OS X Install DVD or from Apple's website

* if you plan on using macports, you may skip to [http://supertuxkart.sourceforge.net/site/index.php?title=Building_and_packaging_on_OSX&action=submit#Alternate_path_:_macports Alternate path : macports]

* Add /usr/local/bin to your PATH, *before* /usr/bin (http://www.troubleshooters.com/linux/prepostpath.htm) so that the new versions of stuff you install are picked over the older ones installed by default (this might no be necessary if you don't install autotools below)

* symlink include folder of OpenGL framework to /usr/local/include/GL (Unix programs have an easier time finding it this way)
<pre>
    % sudo ln -s /System/Library/Frameworks/OpenGL.framework/Versions/A/Headers/ /usr/local/include/GL
</pre>

* Download pkg-config sources from http://pkgconfig.freedesktop.org/releases/ and build it:
<pre>
    % cd /path/to/pkg-config-0.22
    % ./configure
    % make
    % sudo make install
</pre>

====== Autotools ======
This step is probably only necessary for OS X 10.4 users who use SVN version of STK (I think) - OS X 10.5 users can skip it.
On OS X 10.4, you will want to install more recent autotools (the ones that came with your computer are too old). Before doing this, make sure /usr/local/bin is in your PATH as described above otherwise it won't work (will pick old versions and just ignore the new ones).

All the following programs can be built and installed with the following commands on the terminal :
<pre>
    % cd /path/to/source_file
    % ./configure
    % make
    % sudo make install
</pre>

** get M4 from http://ftp.gnu.org/gnu/m4/ and install it
** symlink m4 to gm4 since that's how some programs refer to it. 

<pre>
        % sudo ln -s /usr/local/bin/m4 /usr/local/bin/gm4
</pre>

*Then, build and install autoconf and automake from GNU the same way as described above
** http://www.gnu.org/software/autoconf/
** http://www.gnu.org/software/automake/

====== Gettext ======
Build and install gnu gettext using regular ''./configure && make && sudo make install''
* http://www.gnu.org/software/gettext/

====== ogg/vorbis ======
* download libogg sources from http://xiph.org/downloads/
<pre>
    % ./configure
    % make
    % sudo make install
</pre>

* download libvorbis from http://xiph.org/downloads/
<pre>
    % ./configure PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/lib/pkgconfig
    % make
    % sudo make install
</pre>

====== SDL ======
* get source code archive from http://www.libsdl.org/download-1.2.php
<pre>
    % cd /path/to/SDL-1.2.13
    % ./configure --without-x --disable-x11-video
    % make
    % sudo make install
</pre>    

====== PLib ======
* The sources you can download from the official plib website will not build on mac. Instead, download the modified sources from the dependencies package of the downloads area here : http://sourceforge.net/projects/supertuxkart

<pre>
    % ./configure
    % make
    % sudo make install
</pre>


==== OpenAL ====

(This bit is a bit messy, sorry)

The OpenAL framework provided by Apple on OS X 10.4 is too old. Once again maybe 10.5 users will have a more recent one but for now if we want 10.4 compatibility we do the following :

* Get OpenAL source code
** I personnaly used SVN. It's actually probably not a good idea to use an unstable version. Anyway it worked for me so I leave it this way but you might want to try a source archive or a stable branch instead.
<pre>
    % svn checkout svn://connect.creativelabs.com/OpenAL/trunk openal
    % cd openal
</pre>

* build OpenAL:
** open folder OpenAL-MacOSX, open XCode project
** select target openal.dylib and build style "deployment"
** build
** find /OpenAL-MacOSX/build/Deployment/openal.dylib and copy it to /usr/local/lib, renaming it to libopenal.dylib
<pre>
        % sudo cp ./OpenAL-MacOSX/build/Deployment/openal.dylib /usr/local/lib/libopenal.dylib
        % sudo install_name_tool -id /usr/local/lib/libopenal.dylib /usr/local/lib/libopenal.dylib
</pre>

* copy headers from /OpenAL-MacOSXbuild/include/AL to /usr/local/include/AL
<pre>
    % sudo cp -r ./include/AL/  /usr/local/include/AL
</pre>

* create openal.pc in /usr/local/lib/pkgconfig (beware, if you copy-and-paste from your browser, line endings may be messed up) :
<pre>
prefix=/usr/local
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir=${prefix}/include

Name: OpenAL
Description: OpenAL blah blah blah not an official .pc file
Requires:
Version: 1.1.0
Libs: -L${libdir} -lopenal
Cflags: -I${includedir}
</pre>


* build alut (STK SVN no longer requires ALUT, version 0.5 and prior do) :
<pre>
    % cd /openal/alut
    % ./autogen.sh
    % ./configure
    % make
    % sudo make install
</pre>

==== Alternate path : macports ====

* Add /opt/local/bin to your PATH, *before* /usr/bin (http://www.troubleshooters.com/linux/prepostpath.htm) so that the new versions of stuff you install are picked over the older ones installed by default (this might no be necessary if you don't install autotools below)
* OPTIONAL: symblink /opt/local/ to usr/local<pre> ln -s /opt/local/ usr/local </pre>

These commands install a bit more stuff than needed, because their author [[jpenguin]] [http://jpenguin.110mb.com] needed to build other games too. For STK, freetype, sdl_tiff, esound, SDL_mixer, SDL-image and mikmod should not be necessary. Since I don't use macports I will leave them as-is.

<pre>
sudo port -v install pkgconfig
sudo port -v install plib
sudo port -v install libsdl +quartz
sudo port -v install libsdl_mixer +mikmod
sudo port -v install libsdl_image
sudo port -v install libogg
sudo port -v install libvorbis
sudo port -v install automake
sudo port -v install esound
sudo port -v install libsdl_ttf
sudo port -v install freetype 
</pre>

<pre>
    % sudo ln -s /System/Library/Frameworks/OpenGL.framework/Versions/A/Headers/ /opt/local/include/GL
</pre>

MacPorts currently supplies openal 1.0, however this is to to old.  The OpenAL framework provided by Apple on OS X 10.4 is also too old. Once again maybe 10.5 users will have a more recent one but for now if we want 10.4 compatibility, you will likely need to install OpenAL .  You can use this process

1. place the file [http://www.mediafire.com/?wzbzn3g1jyv] in /opt/local/var/macports/sources/rsync.macports.org/release/ports/

2. open terminal
3. <pre> cd /opt/local/var/macports/sources/rsync.macports.org/release/ports/ </pre>
4. <pre> sudo patch -p1 < openal-1.1-Portfile.diff </pre>
5. if it asks you what file to patch, type: /opt/local/var/macports/sources/rsync.macports.org/release/ports/audio/openal/
6. <pre> sudo port -v install openal </pre>
7. The portfile for openal isn't perfect, you need to make the openal dylib know where it is; for me, the command was
    <pre>sudo install_name_tool -id  /opt/local/lib/libopenal1.1.0.dylib /opt/local/lib/libopenal1.1.0.dylib</pre>
8.. place the file [http://www.mediafire.com/?vv42cwjks8y] in /opt/local/lib/pkgconfig/

Or, if you prefer to build your own copy of openal, you can do as described [http://supertuxkart.sourceforge.net/Building_and_packaging_on_OSX#OpenAL above]. (rememberer to replace usr with opt)

==== Building STK ====
* If you have anything installed in /opt/supertuxkart (like an older version) it's probably a good idea to delete it now so you can start with a clean install.

<pre>
    % ./autogen.sh (for SVN version only?)
    % ./configure PKG_CONFIG_PATH=/usr/local/lib/pkgconfig --enable-debug=no --prefix=/opt/supertuxkart
    % make
    % sudo make install
</pre>

* You can now launch STK from terminal
<pre>
    % /opt/supertuxkart/bin/supertuxkart
</pre>


==== Making an app bundle ====

Download this [http://www.mediafire.com/file/qn3vwqyymgl/packagingSTK.zip packaging kit]
If you prefer to make your own ''makeapp.sh'' script, you may; the following is an example:
<pre>
INSTALL_PREFIX="/opt/supertuxkart"

echo "* Removing any existing installation"
rm -rf ./SuperTuxKart.app

echo "* Creating skeleton"
mkdir -p ./SuperTuxKart.app/Contents/Resources
mkdir ./SuperTuxKart.app/Contents/MacOS
cp info.plist ./SuperTuxKart.app/Contents/info.plist
cp stk.icns ./SuperTuxKart.app/Contents/Resources/stk.icns

echo "* Copying executable"
cp $INSTALL_PREFIX/games/supertuxkart ./SuperTuxKart.app/Contents/MacOS/supertuxkart

echo "* Copying data files"
cp -r $INSTALL_PREFIX/share/games/supertuxkart ./SuperTuxKart.app/Contents/Resources/data/

</pre>

* You'll need an icon file named 'stk.icns'
* Create an Info.plist file like the following one (adapt version number) :
<pre>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CFBundleDevelopmentRegion</key>
	<string>English</string>
	<key>CFBundleExecutable</key>
	<string>supertuxkart</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>SuperTuxKart</string>
	<key>CFBundleIconFile</key>
	<string>stk.icns</string>
	<key>CFBundlePackageType</key>
	<string>APPL</string>
	<key>CFBundleVersion</key>
	<string>0.5RC1</string>
	<key>CSResourcesFileMapped</key>
	<true/>
</dict>
</plist>
</pre>

And run it as :
<pre>
    % chmod +x makeapp.sh
    % ./makeapp.sh
</pre>

You should now be able to open it by double-clicking, however you can't send it to another computer.

====== Getting ready for distribution ======

* Here, many strategies are possible, I personnaly used '''dylib bundler'''.
Get its sources from http://macdylibbundler.sourceforge.net (version 0.3 or better required), build it and install it.


Issue one of these two depending on your architecture

<code>
% dylibbundler -b -x ./SuperTuxKart.app/Contents/MacOS/supertuxkart -d ./SuperTuxKart.app/Contents/libs-ppc/ -od -p @executable_path/../libs-ppc/
</code>

<code>
% dylibbundler -b -x ./SuperTuxKart.app/Contents/MacOS/supertuxkart -d ./SuperTuxKart.app/Contents/libs-intel/ -od -p @executable_path/../libs-intel/
</code>

* To make a Universal Binary, you need to build it on 2 computers, then you can merge the two executable with command

<pre>
% lipo -create [ppc-file] [intel-file] -output [filename]
</pre>

====== Making a DMG-- Optional ======
To make a DMG place your executables in a folder, along with the changelog, CREDITS, CCOPYING & README, a background image, along with any other files you want to include.  Then open disk utility and create a new disk image from folder; once you select the folder you put your files in, select read/write from the format menu in 2nd dialog.  Once that disk image has been created, open it up.  Once the disk image is open, change it to icon view; then select Show View Options from the Veiw menu, select "this window only" and then select "picture", choose your image in your disk image, and close the "view options, then resize the window and position the icon how you want [http://www.mediafire.com/imageview.php?quickkey=mzmgbmjusy3&thumb=4 example]; next open terminal and type <pre>
/developer/tools/setfile -a V ''PATHTOIMAGE''</pre>
.  Then open disk utility back up, click on convert, select the supertuxkart disk image you just made, select "compressed (bzip2)"(Panther does not support bz2 compressed dmgs, `soo unless you want to exclude panther users; use another compressed format) from the format drop-down menu, and click save.  Your disk image is complete!
