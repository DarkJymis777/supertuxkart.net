Materials are a method of making textures simulate real-life... materials. A texture on a flat surface can give you the look of, for example, leather, but it can't give you everything. What other properties does leather have? It's shiny, but not reflective, and slightly bumpy. All these effects and more are controlled by the material.

It's important to note at this point that we are not referring to Blender or Cycles materials. These are ignored by SuperTuxKart. Instead, use our own materials system to apply materials to textures.

{{Popup-warning|content=Several other features, including special effects and physics properties also piggyback on SuperTuxKart's materials system. These reside in the "Interaction" section of the SuperTuxKart Image Properties panel, and are discussed in other articles. This article only discusses the "Display" section.}}

If you used textures from the media repository, you don't have to worry about materials. The materials are already configured in <code>materials.xml</code> in the <code>textures</code> folder of the <code>stk-assets</code> repository.

Textures not from the media repository will have to be configured in the SuperTuxKart Image Properties panel. There are several options to configure.

== Shader ==

Shaders are little programs that control how things are rendered in the scene. They can do all sorts of things, so picking the right one is important. The shader is selected using the drop-down "Shader" menu in the "Display" section of the SuperTuxKart Image Properties panel.

=== Generic (solid) Shader ===

This shader is used for most textures. It supports a number of options to enhance the look of textures and is recommended for most special effects.

<gallery mode="packed" widths="256" heights="256">
File:Stk_generic_ice_a.png|Texture
File:Stk_generic_ice_a_gloss.png|Gloss Map
File:Stk_generic_ice_a_nm.png|Normal Map
</gallery>

==== Gloss Map ====

The gloss map is what lets you simulate a shiny surface. However, there are multiple factors to shininess. To take these all into account, the red, green, and blue channels of the gloss map image each correspond to a separate part. Making and testing a gloss map can be very time consuming, especially since you need to reload the game each time you try out a new gloss map. If you are good at Blender, however, you may find [http://forum.freegamedev.net/viewtopic.php?f=18&t=6246 this] useful.

* The red channel controls specularity. This is how much light reflects of the surface, or reflectivity. The greater the amount of red in the gloss map, the more light will be reflected.
* The green channel controls diffusion. This is how much light is scattered. Less diffusion means a more mirror or chrome-like appearance. Perhaps counterintuitively, the greater amount of green in the gloss map, the less diffusion will occur.
* The blue channel controls emission. The more blue present, the more the material will emit light. However, this light is only localized and does not brighten the surrounding area.

<gallery mode="packed" widths="640px" heights="300px">
File:Gloss_Map_Explanation.png
</gallery>

{{Popup-warning|content=If you have trouble with making your gloss map changes take effect in-game, try disabling texture compression in the game options.}}

==== Normal Map ====

Normal maps allow you to reduce poly while still getting the cool visual effects of a bumpy or wavy surface. Many textures from the media repository already have normal maps, so you don't need to create your own if you're using textures from the media repository. (In fact, you can't, although you may be able to help by making normal maps for textures that don't have them.)

TODO: Quick how-to

==== Alpha Mask ====

Sorry, this is a mistake. The solid shader doesn't support alpha masks.

==== Colorizing ====

TODO

=== Cutout Transparency ===

The cutout transparency shader is best for things like vegetation (when you do not want it to move—otherwise, use the vegetation shader). It performs "alpha testing", to make pixels of a texture either 100% solid or 100% transparent. However, it doesn't have all the features of the solid shader, so avoid using it for solid textures.

=== Blending Transparency ===

The blending transparency ("alpha blend") shader is used for translucent textures, like windows. The colors of the objects seen through these textures will be blended with the colors of the translucent parts of the texture.

=== Additive Transparency ===

The additive shader works the same way as the alpha blending shader, but instead of darkening colors when mixing, colors are lightened. This is useful for things like light beams or fire, to lighten objects behind the texture.

=== Unlit (solid) ===

Textures using the unlit shader will always be at full brightness, in spite of lights or shadows. This shader does not support transparency.

=== Vegetation ===

The vegetation shader performs alpha testing, just like the cutout transparency. However, it additionally animates objects that have the texture applied, making them wave as if blowing in the wind. Using vertex painting, (see [[Texture#Vertex Coloring]] for a tutorial) paint in black vertices to remain stationary, and leave white parts of the mesh that will wave. The vegetation shader also provides two other options for control:

* '''Waving speed:''' How fast the vegetation will move back and forth
* '''Waving amplitude:''' The distance, in Blender units that the vegetation will wave

=== Water ===

TODO

=== Reflection (Sphere Mapping) ===

{{Popup-warning|content=Warning! Deprecated! Don't use this shader, use the solid shader with a gloss map instead!}}

This shader simulates a chrome appearance by simply reflecting anything nearby. Because of this, it is really not the most realistic and doesn't provide all the details of the solid shader with a gloss map. However, if you're desperate and don't have a lot of time, you can use this shader to get an easy chrome effect.

=== Splatting ===

Splatting allows you to "draw" up to four textures onto another texture and mix the textures together. However, it is VERY costly in terms of video RAM. More info on the [[Splatting]] page, TODO: rewrite the docs and move them here.

=== Bubble ===

TODO

== Backface Culling ==

Backface culling makes planes only visible from one side—the side the normal is on. Unfortunately, due to the real-time light rendering algorithm introduced with SuperTuxKart 0.9, this feature no longer works. You can instead use Blender's "Solidify" modifier with a thickness of zero and with "Fill Rim" disabled in order to generate duplicate faces pointing the other way on export.
